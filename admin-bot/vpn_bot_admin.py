#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Telegram-–±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WireGuard —á–µ—Ä–µ–∑ /root/vpn_setup.sh

UI:
- –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ (12 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É), –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ê–∫—Ç–∏–≤–Ω—ã–µ/–í—Å–µ.
- –ü–æ–∏—Å–∫: /find <mask>
- –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: .conf / QR / üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ / –£–¥–∞–ª–∏—Ç—å (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º) / ‚Üê –ù–∞–∑–∞–¥.
- –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /stats –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ¬´üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª –≤–Ω–∏–∑—É —Å–ø–∏—Å–∫–∞.
- –í—Å–µ –≤—ã–∑–æ–≤—ã bash-—Å–∫—Ä–∏–ø—Ç–∞ –∏–¥—É—Ç —á–µ—Ä–µ–∑ /bin/bash.

–ö–æ–º–∞–Ω–¥—ã:
  /list [active|all] [page]
  /find <mask>
  /add <username> [--ip 10.8.0.X] [--ipv6]
  /revoke <username>
  /getconf <username>
  /getqr <username>
  /show <username>
  /stats
  /whoami
"""

import asyncio
import html
import logging
import os
import re
import shlex
import subprocess
from datetime import datetime
from glob import glob
from pathlib import Path
from typing import Iterable, List, Sequence, Set, Tuple, Optional, Dict
import sqlite3

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile, Message,
)
from telegram.ext import (
    ApplicationBuilder, ContextTypes, CommandHandler, CallbackQueryHandler,
)
from telegram.error import BadRequest

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
VPN_SCRIPT = Path("/root/vpn_setup.sh")  # –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª ‚Äî —Å–¥–µ–ª–∞–π —Å–∏–º–ª–∏–Ω–∫ –Ω–∞ —ç—Ç–æ –∏–º—è
BASH = os.environ.get("BASH", "/bin/bash")  # –≤—Å–µ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ bash
CLIENTS_DIR = Path("/etc/wireguard/clients")

BOT_TOKEN = os.environ.get(
    "BOT_TOKEN",
    "Your_Token"  # ENV –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
).strip()
SUPPORT_CONTACT_LINK = os.environ.get(
    "SUPPORT_CONTACT_LINK",
    "https://t.me/baxbax_VPN_support"
).strip()

# –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ADMIN_IDS="123,456"
_ADMIN_ENV = os.environ.get("ADMIN_IDS", "").strip()
ADMIN_IDS = {int(x) for x in _ADMIN_ENV.split(",") if x.strip().isdigit()} if _ADMIN_ENV else set()

PAGE_SIZE = 12
ONLINE_WINDOW = 300  # —Å–µ–∫—É–Ω–¥, —Å—á–∏—Ç–∞–µ–º ¬´–æ–Ω–ª–∞–π–Ω¬ª, –µ—Å–ª–∏ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ –±—ã–ª–æ <= 5 –º–∏–Ω –Ω–∞–∑–∞–¥
USERNAME_RE = re.compile(r"^[A-Za-z0-9._-]{1,32}$")

# –ü—É—Ç—å –∫ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞ (–µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ç–æ–π –∂–µ –º–∞—à–∏–Ω–µ)
USER_DB_PATH = Path("/var/lib/vpn-user-bot/db.sqlite3")

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(name)s :: %(message)s")
log = logging.getLogger("vpn-bot")

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def is_admin(update: Update) -> bool:
    if not ADMIN_IDS:
        return True
    uid = update.effective_user.id if update.effective_user else None
    return uid in ADMIN_IDS

def validate_username(u: str) -> bool:
    return bool(USERNAME_RE.fullmatch(u))

async def run_cmd(args: Sequence[str], timeout: int = 180) -> subprocess.CompletedProcess:
    log.debug("RUN: %s", " ".join(shlex.quote(a) for a in args))
    return await asyncio.to_thread(
        subprocess.run,
        args,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        timeout=timeout,
        check=False,
    )

async def run_script(script_args: Sequence[str], timeout: int = 240) -> subprocess.CompletedProcess:
    return await run_cmd([BASH, str(VPN_SCRIPT), *script_args], timeout=timeout)

def detect_iface() -> str:
    files = sorted(glob("/etc/wireguard/*.conf"))
    return Path(files[0]).stem if files else "wg0"

def client_dir(username: str) -> Path:
    return CLIENTS_DIR / username

def client_conf_path(username: str) -> Path:
    return client_dir(username) / f"{username}.conf"

def client_pubkey_path(username: str) -> Path:
    return client_dir(username) / "public.key"

def client_qr_path(username: str) -> Path:
    return client_dir(username) / "qr.png"

def list_all_clients_fs() -> List[str]:
    if not CLIENTS_DIR.exists():
        return []
    names: List[str] = []
    for d in CLIENTS_DIR.iterdir():
        if d.is_dir() and validate_username(d.name) and (d / f"{d.name}.conf").exists():
            names.append(d.name)
    names.sort(key=str.lower)
    return names

async def get_active_peer_keys() -> Tuple[str, Set[str]]:
    iface = detect_iface()
    proc = await run_cmd(["wg", "show", iface, "peers"])
    keys: Set[str] = set()
    if proc.returncode == 0 and proc.stdout.strip():
        for token in proc.stdout.replace("\n", " ").split():
            token = token.strip()
            if token:
                keys.add(token)
    return iface, keys

async def list_active_clients() -> List[str]:
    _, peer_keys = await get_active_peer_keys()
    names: List[str] = []
    for name in list_all_clients_fs():
        pub = client_pubkey_path(name)
        if pub.exists() and pub.read_text().strip() in peer_keys:
            names.append(name)
    return names

def paginate(items: Sequence[str], page: int, size: int) -> Sequence[str]:
    start = max(page - 1, 0) * size
    end = start + size
    return items[start:end]

def human_bytes(n: int) -> str:
    s = float(n)
    for unit in ("B", "KB", "MB", "GB", "TB"):
        if s < 1024.0 or unit == "TB":
            return f"{s:.2f} {unit}"
        s /= 1024.0
    return f"{n} B"

def fmt_dt(ts: float) -> str:
    dt = datetime.fromtimestamp(ts)
    return dt.strftime("%Y-%m-%d %H:%M:%S")

def fmt_age(seconds: float) -> str:
    seconds = int(max(0, seconds))
    d, r = divmod(seconds, 86400)
    h, r = divmod(r, 3600)
    m, s = divmod(r, 60)
    parts = []
    if d: parts.append(f"{d}–¥")
    if h: parts.append(f"{h}—á")
    if m: parts.append(f"{m}–º")
    if not parts: parts.append(f"{s}—Å")
    return " ".join(parts)

# ---------- –†–∞–∑–º–µ—Ç–∫–∞ ----------
def build_list_markup(items: Sequence[str], page: int, total_pages: int, scope: str) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    for name in items:
        rows.append([InlineKeyboardButton(f"{name}", callback_data=f"user:{name}:{scope}:{page}")])
    nav: List[InlineKeyboardButton] = []
    if page > 1:
        nav.append(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"list:{scope}:{page-1}"))
    if page < total_pages:
        nav.append(InlineKeyboardButton("–î–∞–ª—å—à–µ ¬ª", callback_data=f"list:{scope}:{page+1}"))
    if nav:
        rows.append(nav)
    # –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    rows.append([InlineKeyboardButton("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"gstats:{scope}:{page}")])
    # –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –æ–±–ª–∞—Å—Ç—å
    toggle_scope = "all" if scope == "active" else "active"
    rows.append([InlineKeyboardButton(f"–ü–æ–∫–∞–∑–∞—Ç—å: {('–ê–∫—Ç–∏–≤–Ω—ã–µ' if scope=='active' else '–í—Å–µ')} ‚ñ∏ —Å–º–µ–Ω–∏—Ç—å",
                                      callback_data=f"list:{toggle_scope}:1")])
    return InlineKeyboardMarkup(rows)

def build_user_markup(name: str, scope: str, page: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚¨áÔ∏è .conf",      callback_data=f"act:getconf:{name}:{scope}:{page}"),
            InlineKeyboardButton("üßæ QR",          callback_data=f"act:getqr:{name}:{scope}:{page}"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",  callback_data=f"act:stats:{name}:{scope}:{page}"),
        ],
        [   InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å",     callback_data=f"act:askrevoke:{name}:{scope}:{page}") ],
        [   InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"list:{scope}:{page}") ],
    ])

def build_user_confirm_markup(name: str, scope: str, page: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"act:revoke:{name}:{scope}:{page}"),
            InlineKeyboardButton("‚úñÔ∏è –û—Ç–º–µ–Ω–∞",      callback_data=f"user:{name}:{scope}:{page}"),
        ]
    ])

async def notify_user_revoked_if_possible(username: str, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ï—Å–ª–∏ –∏–º—è –ø–æ—Ö–æ–∂–µ –Ω–∞ u<tg_id>, –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–∫ 'canceled' –≤ –ë–î user‚Äë–±–æ—Ç–∞
    –∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    –û—à–∏–±–∫–∏ –Ω–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º (—á—Ç–æ–±—ã UI –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª –æ–±—â—É—é –æ—à–∏–±–∫—É).
    """
    m = re.fullmatch(r"u(\d+)", username)
    if not m:
        return
    try:
        tg_id = int(m.group(1))
    except Exception:
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î: –ø–æ–º–µ—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–∫ canceled
    try:
        if USER_DB_PATH.exists():
            con = sqlite3.connect(str(USER_DB_PATH))
            with con:
                con.execute("UPDATE subscriptions SET status='canceled' WHERE tg_id=? AND status='active'", (tg_id,))
            con.close()
    except Exception as e:
        log.warning("Failed to mark subscriptions canceled for tg_id=%s: %s", tg_id, e)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –ø–∏—Å–∞–ª —ç—Ç–æ–º—É –±–æ—Ç—É)
    try:
        await context.bot.send_message(
            chat_id=tg_id,
            text=(
                "–í–∞—à –¥–æ—Å—Ç—É–ø –∫ VPN –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Å–∞–ø–ø–æ—Ä—Ç: {SUPPORT_CONTACT_LINK}"
            ),
            disable_web_page_preview=True,
        )
    except Exception as e:
        # user –º–æ–≥ –Ω–µ –Ω–∞—á–∏–Ω–∞—Ç—å —á–∞—Ç —Å –∞–¥–º–∏–Ω‚Äë–±–æ—Ç–æ–º ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        log.info("Could not DM user %s about revoke (ignored): %s", tg_id, e)

def build_stats_markup(name: str, scope: str, page: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Üª –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"act:stats:{name}:{scope}:{page}")],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥",    callback_data=f"user:{name}:{scope}:{page}")],
    ])

def build_global_stats_markup(scope: str, page: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Üª –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"gstats:{scope}:{page}")],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"list:{scope}:{page}")],
    ])

def list_title(scope: str, page: int, total: int, total_pages: int) -> str:
    return f"–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ ({'–ê–∫—Ç–∏–≤–Ω—ã–µ' if scope=='active' else '–í—Å–µ'}): —Å—Ç—Ä. {page}/{total_pages} ‚Ä¢ –≤—Å–µ–≥–æ: {total}\n" \
           f"–ü–æ–¥—Å–∫–∞–∑–∫–∏: /find <–º–∞—Å–∫–∞>, /add <–∏–º—è>, /revoke <–∏–º—è>"

def ensure_single_message(msg: Message | None) -> bool:
    return msg is not None and msg.message_id is not None

# ---------- wg dump ----------
async def wg_dump_map() -> Tuple[str, Dict[str, dict]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (iface, map[pubkey] -> dict(fields)) –ø–æ `wg show <iface> dump`
    –ü–æ–ª—è peer-—Å—Ç—Ä–æ–∫–∏:
      0 public_key, 1 preshared_key, 2 endpoint, 3 allowed_ips,
      4 latest_handshake (unix), 5 rx, 6 tx, 7 persistent_keepalive
    """
    iface = detect_iface()
    proc = await run_cmd(["wg", "show", iface, "dump"])
    peers: Dict[str, dict] = {}
    if proc.returncode != 0:
        return iface, peers
    for line in proc.stdout.strip().splitlines():
        parts = line.strip().split("\t")
        if len(parts) == 4:
            # header/interface line ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue
        if len(parts) >= 8:
            pub = parts[0]
            peers[pub] = {
                "endpoint": parts[2] if parts[2] != "(none)" else "",
                "allowed_ips": parts[3],
                "latest_handshake": int(parts[4]) if parts[4].isdigit() else 0,
                "rx": int(parts[5]) if parts[5].isdigit() else 0,
                "tx": int(parts[6]) if parts[6].isdigit() else 0,
                "keepalive": int(parts[7]) if parts[7].isdigit() else 0,
            }
    return iface, peers

def map_pub_to_user() -> Dict[str, str]:
    """–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ public.key -> username –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    mapping: Dict[str, str] = {}
    if not CLIENTS_DIR.exists():
        return mapping
    for d in CLIENTS_DIR.iterdir():
        if not d.is_dir():
            continue
        name = d.name
        pub = d / "public.key"
        if pub.exists():
            try:
                key = pub.read_text().strip()
                if key:
                    mapping[key] = name
            except Exception:
                pass
    return mapping

# ---------- –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç—É ----------
async def build_stats_text(username: str) -> str:
    pub_path = client_pubkey_path(username)
    conf_path = client_conf_path(username)
    if not pub_path.exists():
        return "–ù–µ—Ç public.key ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –∫–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω."
    pubkey = pub_path.read_text().strip()

    iface, dump_map = await wg_dump_map()
    st = dump_map.get(pubkey, {})
    now = datetime.now().timestamp()

    # –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞: Address, AllowedIPs
    addr = "-"
    allowed_user = "-"
    if conf_path.exists():
        try:
            for line in conf_path.read_text().splitlines():
                if line.strip().startswith("Address"):
                    addr = line.split("=", 1)[1].strip()
                if line.strip().startswith("AllowedIPs"):
                    allowed_user = line.split("=", 1)[1].strip()
        except Exception:
            pass

    hs = st.get("latest_handshake", 0)
    if hs:
        hs_text = f"{fmt_dt(hs)} (‚âà {fmt_age(now-hs)} –Ω–∞–∑–∞–¥)"
    else:
        hs_text = "–µ—â—ë –Ω–µ –±—ã–ª–æ"

    rx = st.get("rx", 0)
    tx = st.get("tx", 0)
    total = rx + tx
    keepalive = st.get("keepalive", 0)
    keepalive_text = f"{keepalive}s" if keepalive else "–≤—ã–∫–ª"
    endpoint = st.get("endpoint") or "-"

    lines = [
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {html.escape(username)}</b>",
        f"–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: <code>{iface}</code>",
        f"–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞: <code>{html.escape(addr)}</code>",
        f"Endpoint (–ø–æ—Å–ª–µ–¥–Ω–∏–π): <code>{html.escape(endpoint)}</code>",
        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ: {hs_text}",
        f"–¢—Ä–∞—Ñ–∏–∫: RX {human_bytes(rx)} | TX {human_bytes(tx)} | Œ£ {human_bytes(total)}",
        f"Keepalive: {keepalive_text}",
        f"AllowedIPs (client): <code>{html.escape(allowed_user)}</code>",
    ]
    return "\n".join(lines)

# ---------- –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ----------
async def build_global_stats_text() -> str:
    all_clients = list_all_clients_fs()
    total_clients = len(all_clients)

    iface, dump_map = await wg_dump_map()
    pub2user = map_pub_to_user()
    now = datetime.now().timestamp()

    known_peers = {k: v for k, v in dump_map.items() if k in pub2user}
    peers_count = len(known_peers)

    online_recent = 0
    rx_total = 0
    tx_total = 0
    leaderboard: List[Tuple[str, int, int, int]] = []  # (username_or_key, rx, tx, hs)

    for pub, st in known_peers.items():
        rx = int(st.get("rx", 0))
        tx = int(st.get("tx", 0))
        hs = int(st.get("latest_handshake", 0))
        if hs and now - hs <= ONLINE_WINDOW:
            online_recent += 1
        rx_total += rx
        tx_total += tx
        username = pub2user.get(pub, pub[:8])
        leaderboard.append((username, rx, tx, hs))

    # —Ç–æ–ø –ø–æ —Å—É–º–º–∞—Ä–Ω–æ–º—É —Ç—Ä–∞—Ñ–∏–∫—É
    leaderboard.sort(key=lambda x: (x[1] + x[2]), reverse=True)
    top = leaderboard[:10]

    lines = [
        f"üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>",
        f"–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: <code>{iface}</code>",
        f"–ö–ª–∏–µ–Ω—Ç–æ–≤ (–≤—Å–µ–≥–æ –ø–æ –ø–∞–ø–∫–∞–º): <b>{total_clients}</b>",
        f"Peers –≤ wg (–∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤): <b>{peers_count}</b>",
        f"–û–Ω–ª–∞–π–Ω (—Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ ‚â§ {ONLINE_WINDOW//60} –º–∏–Ω): <b>{online_recent}</b>",
        f"Œ£ —Ç—Ä–∞—Ñ–∏–∫ (–∏–∑–≤–µ—Å—Ç–Ω—ã–µ): RX {human_bytes(rx_total)} | TX {human_bytes(tx_total)} | Œ£ {human_bytes(rx_total+tx_total)}",
        "",
        "<b>–¢–æ–ø-10 –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É</b>",
    ]
    if not top:
        lines.append("‚Äî –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî")
    else:
        for i, (name, rx, tx, hs) in enumerate(top, 1):
            age = f"{fmt_age(now-hs)} –Ω–∞–∑–∞–¥" if hs else "–Ω–µ—Ç —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–π"
            lines.append(f"{i}. {html.escape(name)} ‚Äî RX {human_bytes(rx)}, TX {human_bytes(tx)}, Œ£ {human_bytes(rx+tx)}; HS: {age}")

    return "\n".join(lines)

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update): return await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WireGuard.\n"
        "‚Ä¢ /list ‚Äî —Å–ø–∏—Å–æ–∫ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)\n"
        "‚Ä¢ /find <–º–∞—Å–∫–∞> ‚Äî –ø–æ–∏—Å–∫\n"
        "‚Ä¢ /add <username> [--ip ...] [--ipv6]\n"
        "‚Ä¢ /revoke <username>\n"
        "‚Ä¢ /getconf <username> /getqr <username>\n"
        "‚Ä¢ /show <username>\n"
        "‚Ä¢ /stats ‚Äî –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
    )

async def cmd_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update): return await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    args = context.args
    scope = (args[0].lower() if args and args[0].lower() in ("active", "all") else "active")
    page = int(args[1]) if len(args) >= 2 and args[1].isdigit() else 1

    items = await (list_active_clients() if scope == "active" else asyncio.to_thread(list_all_clients_fs))
    total = len(items)
    total_pages = max((total + PAGE_SIZE - 1) // PAGE_SIZE, 1)
    page = min(max(page, 1), total_pages)
    page_items = paginate(items, page, PAGE_SIZE)

    text = list_title(scope, page, total, total_pages)
    markup = build_list_markup(page_items, page, total_pages, scope)

    msg = await update.message.reply_text("–ó–∞–≥—Ä—É–∂–∞—é‚Ä¶")
    if ensure_single_message(msg):
        await msg.edit_text(text)
        await msg.edit_reply_markup(markup)

async def cmd_find(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update): return await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    if not context.args:     return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find <–º–∞—Å–∫–∞>")
    mask = " ".join(context.args).lower()
    all_names = await asyncio.to_thread(list_all_clients_fs)
    matches = [n for n in all_names if mask in n.lower()]
    if not matches:
        return await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    matches = matches[:30]
    kb = [[InlineKeyboardButton(n, callback_data=f"user:{n}:all:1")] for n in matches]
    await update.message.reply_text(f"–ù–∞–π–¥–µ–Ω–æ: {len(matches)}", reply_markup=InlineKeyboardMarkup(kb))

def _parse_add_args(args: List[str]):
    if not args: return "", []
    i = 0
    name_parts: List[str] = []
    while i < len(args) and not args[i].startswith("--"):
        name_parts.append(args[i]); i += 1
    username = "".join(name_parts)
    flags: List[str] = []
    while i < len(args):
        tok = args[i]
        if tok == "--ipv6":
            flags.append("--ipv6"); i += 1
        elif tok == "--ip":
            if i + 1 >= len(args): raise ValueError("–§–ª–∞–≥ --ip —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–∞–ø—Ä.: --ip 10.8.0.10")
            flags.extend(["--ip", args[i + 1]]); i += 2
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: {tok}")
    return username, flags

async def cmd_add(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update): return await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    try:
        username, flags = _parse_add_args(context.args)
    except ValueError as e:
        return await update.message.reply_text(str(e))
    if not username: return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <username> [--ip ...] [--ipv6]")
    if not validate_username(username): return await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (A-Za-z0-9._-).")
    await update.message.chat.send_action("typing")
    proc = await run_script(["add", username, *flags])
    if proc.returncode == 0:
        msg = proc.stdout.strip() or "–ì–æ—Ç–æ–≤–æ."
        await update.message.reply_text(f"‚úÖ {html.escape(msg)}", parse_mode="HTML",
                                        reply_markup=build_user_markup(username, "active", 1))
    else:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞:\n<pre>{html.escape(proc.stderr or proc.stdout)}</pre>", parse_mode="HTML")

async def cmd_revoke(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update): return await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    if not context.args:     return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke <username>")
    username = context.args[0]
    if not validate_username(username): return await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
    await update.message.chat.send_action("typing")
    proc = await run_script(["revoke", username])  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: purge
    if proc.returncode == 0:
        await update.message.reply_text(f"üóë {username} —É–¥–∞–ª—ë–Ω.")
        try:
            await notify_user_revoked_if_possible(username, context)
        except Exception as e:
            log.warning("notify_user_revoked failed (cmd) for %s: %s", username, e)
    else:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞:\n<pre>{html.escape(proc.stderr or proc.stdout)}</pre>", parse_mode="HTML")

async def cmd_getconf(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update): return await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    if not context.args:     return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /getconf <username>")
    username = context.args[0]
    if not validate_username(username): return await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
    path = client_conf_path(username)
    if not path.exists():
        await update.message.reply_text("–ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–±—É—é —Å–æ–∑–¥–∞—Ç—å‚Ä¶")
        proc = await run_script(["add", username])
        if proc.returncode != 0 or not path.exists():
            return await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥:\n<pre>{html.escape(proc.stderr or proc.stdout)}</pre>", parse_mode="HTML")
    await update.message.chat.send_action("upload_document")
    with path.open("rb") as f:
        await update.message.reply_document(document=InputFile(f, filename=path.name), caption=f"{username}.conf")

async def cmd_getqr(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update): return await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    if not context.args:     return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /getqr <username>")
    username = context.args[0]
    if not validate_username(username): return await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
    qr = client_qr_path(username)
    if not qr.exists():
        await update.message.reply_text("QR –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–±—É—é —Å–æ–∑–¥–∞—Ç—å‚Ä¶")
        proc = await run_script(["add", username])
        if proc.returncode != 0 or not qr.exists():
            return await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å QR:\n<pre>{html.escape(proc.stderr or proc.stdout)}</pre>", parse_mode="HTML")
    await update.message.chat.send_action("upload_photo")
    with qr.open("rb") as f:
        await update.message.reply_photo(photo=InputFile(f, filename=qr.name), caption=f"{username} ‚Äî QR")

async def cmd_show(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update): return await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    if not context.args:     return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /show <username>")
    username = context.args[0]
    if not validate_username(username): return await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
    proc = await run_script(["show", username])
    if proc.returncode == 0:
        out = proc.stdout.strip() or "–ü—É—Å—Ç–æ."
        await update.message.reply_text(f"<pre>{html.escape(out)}</pre>", parse_mode="HTML")
    else:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞:\n<pre>{html.escape(proc.stderr or proc.stdout)}</pre>", parse_mode="HTML")

async def cmd_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update): return await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    text = await build_global_stats_text()
    await update.message.reply_text(text, parse_mode="HTML")

# ---------- Callback (–∫–Ω–æ–ø–∫–∏) ----------
async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update):
        return await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    q = update.callback_query
    await q.answer()
    data = (q.data or "")
    try:
        kind, *rest = data.split(":")
    except ValueError:
        return

    # list:<scope>:<page>
    if kind == "list":
        scope, page_s = rest
        page = int(page_s) if page_s.isdigit() else 1
        items = await (list_active_clients() if scope == "active" else asyncio.to_thread(list_all_clients_fs))
        total = len(items)
        total_pages = max((total + PAGE_SIZE - 1) // PAGE_SIZE, 1)
        page = min(max(page, 1), total_pages)
        page_items = paginate(items, page, PAGE_SIZE)
        await q.message.edit_text(list_title(scope, page, total, total_pages))
        await q.message.edit_reply_markup(build_list_markup(page_items, page, total_pages, scope))
        return

    # user:<name>:<scope>:<page>
    if kind == "user":
        name, scope, page_s = rest
        page = int(page_s) if page_s.isdigit() else 1
        await q.message.edit_text(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {name}")
        await q.message.edit_reply_markup(build_user_markup(name, scope, page))
        return

    # gstats:<scope>:<page> ‚Äî –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if kind == "gstats":
        scope, page_s = rest
        page = int(page_s) if page_s.isdigit() else 1
        text = await build_global_stats_text()
        await q.message.edit_text(text, parse_mode="HTML")
        await q.message.edit_reply_markup(build_global_stats_markup(scope, page))
        return

    # act:<action>:<name>:<scope>:<page>
    if kind == "act":
        action, name, scope, page_s = rest
        page = int(page_s) if page_s.isdigit() else 1

        if action == "askrevoke":
            await q.message.edit_text(f"–£–¥–∞–ª–∏—Ç—å {name}?")
            await q.message.edit_reply_markup(build_user_confirm_markup(name, scope, page))
            return

        if action == "revoke":
            proc = await run_script(["revoke", name])
            if proc.returncode == 0:
                # –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –∞–≤–∞—Ä–∏–π–Ω–∏—á–∞—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
                try:
                    await q.message.edit_text(f"üóë {name} —É–¥–∞–ª—ë–Ω.")
                except Exception as e:
                    log.debug("edit_text after revoke ignored: %s", e)
                try:
                    await q.message.edit_reply_markup(None)
                except Exception as e:
                    log.debug("edit_reply_markup after revoke ignored: %s", e)

                # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞ –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await notify_user_revoked_if_possible(name, context)
                except Exception as e:
                    log.warning("notify_user_revoked failed for %s: %s", name, e)
            else:
                await q.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:\n<pre>{html.escape(proc.stderr or proc.stdout)}</pre>",
                    parse_mode="HTML",
                )
            return

        if action == "getconf":
            path = client_conf_path(name)
            if not path.exists():
                proc = await run_script(["add", name])
                if proc.returncode != 0 or not path.exists():
                    return await q.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥:\n<pre>{html.escape(proc.stderr or proc.stdout)}</pre>", parse_mode="HTML")
            with path.open("rb") as f:
                await q.message.reply_document(document=InputFile(f, filename=path.name), caption=f"{name}.conf")
            return

        if action == "getqr":
            qr = client_qr_path(name)
            if not qr.exists():
                proc = await run_script(["add", name])
                if proc.returncode != 0 or not qr.exists():
                    return await q.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å QR:\n<pre>{html.escape(proc.stderr or proc.stdout)}</pre>", parse_mode="HTML")
            with qr.open("rb") as f:
                await q.message.reply_photo(photo=InputFile(f, filename=qr.name), caption=f"{name} ‚Äî QR")
            return

        if action == "stats":
            text = await build_stats_text(name)
            await q.message.edit_text(text, parse_mode="HTML")
            await q.message.edit_reply_markup(build_stats_markup(name, scope, page))
            return

# ---------- –û—à–∏–±–∫–∏ ----------
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    err = context.error
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —à—É–º–Ω—ã–µ/–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    if isinstance(err, BadRequest):
        msg = str(err).lower()
        if "message is not modified" in msg or "query is too old" in msg:
            log.debug("Ignored BadRequest: %s", err)
            return
    log.exception("Exception in handler", exc_info=err)
    try:
        if isinstance(update, Update) and update.effective_chat:
            await update.effective_chat.send_message("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–∑–∂–µ.")
    except Exception:
        pass

# ---------- main ----------
def main():
    if not BOT_TOKEN:
        raise SystemExit("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start",   start))
    app.add_handler(CommandHandler("whoami",  lambda u, c: u.message.reply_text(f"–í–∞—à chat_id: {u.effective_user.id}")))
    app.add_handler(CommandHandler("list",    cmd_list))
    app.add_handler(CommandHandler("find",    cmd_find))
    app.add_handler(CommandHandler("add",     cmd_add))
    app.add_handler(CommandHandler("revoke",  cmd_revoke))
    app.add_handler(CommandHandler("getconf", cmd_getconf))
    app.add_handler(CommandHandler("getqr",   cmd_getqr))
    app.add_handler(CommandHandler("show",    cmd_show))
    app.add_handler(CommandHandler("stats",   cmd_stats))

    app.add_handler(CallbackQueryHandler(on_cb, pattern=r"^(list|user|act|gstats):"))

    app.add_error_handler(on_error)

    app.run_polling()

if __name__ == "__main__":
    main()
